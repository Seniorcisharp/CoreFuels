<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Выбор еды</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: #1a1a2e;
            color: #ffffff;
            font-family: 'Segoe UI', system-ui, sans-serif;
            min-height: 100vh;
            margin: 0;
            padding: 2rem;
            overflow-x: hidden;
            position: relative;
        }

        .container {
            max-width: 1200px;
            position: relative;
            z-index: 1;
        }

        h1 {
            font-weight: 800;
            font-size: 2.5rem;
            background: linear-gradient(90deg, #ff9a8b, #ff6b95, #ff8e53);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin-bottom: 2rem;
            text-align: center;
        }

        .meal-item {
            cursor: pointer;
            border: none;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            transform: translateY(20px);
            opacity: 0;
        }

        .card-img-top {
            height: 180px;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .card-body {
            padding: 1.5rem;
        }

        .card-text {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: #ffffff;
        }

        .selected-products {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
            min-height: 40px;
        }

        .product-circle {
            width: auto;
            height: 36px;
            background: linear-gradient(135deg, #ff9a8b, #ff6b95, #ff8e53);
            color: #0f0f13;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 18px;
            font-size: 0.9rem;
            font-weight: 700;
            border: none;
            box-shadow: 0 4px 12px rgba(255, 107, 149, 0.3);
            padding: 0 12px;
        }

        .modal-content {
            background: rgba(26, 26, 46, 0.98);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            position: sticky;
            top: 0;
            background: rgba(26, 26, 46, 0.9);
            z-index: 1;
        }

        .modal-title {
            font-weight: 700;
            background: linear-gradient(90deg, #ff9a8b, #ff6b95, #ff8e53);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .btn-outline-success {
            border: 2px solid rgba(255, 107, 149, 0.3);
            color: #ffffff;
            border-radius: 50px;
            padding: 0.5rem 1.25rem;
            font-weight: 600;
            background: transparent;
            margin: 0.25rem;
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.2s ease;
        }

            .btn-outline-success:hover {
                background: rgba(255, 107, 149, 0.2);
            }

        .food-bg {
            position: absolute;
            font-size: 1.5rem;
            opacity: 0;
            z-index: 0;
            pointer-events: none;
        }

        .search-container {
            padding: 0 1.5rem 1rem;
            position: sticky;
            top: 70px;
            background: rgba(26, 26, 46, 0.9);
            z-index: 1;
        }

        .search-input {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 25px;
            padding: 8px 15px;
            width: 100%;
        }

            .search-input:focus {
                outline: none;
                box-shadow: 0 0 0 2px rgba(255, 107, 149, 0.3);
            }

        .nutrition-summary {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 1rem;
            margin-top: 1rem;
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
        }

        .nutrition-item {
            text-align: center;
            padding: 0.5rem;
            flex: 1;
            min-width: 80px;
        }

        .nutrition-value {
            font-weight: 700;
            font-size: 1.1rem;
            color: #ff6b95;
        }

        .nutrition-label {
            font-size: 0.8rem;
            opacity: 0.8;
            color: white;
        }
    </style>
</head>
<body>
    <div id="foodBackground"></div>

    <div class="container text-center">
        <h1 class="mb-4">Выберите приём пищи</h1>
        <div class="row row-cols-2 row-cols-md-4 g-4">
            <div class="col" onclick="openModal(this, 'breakfast')">
                <div class="card meal-item">
                    <img src="https://images.unsplash.com/photo-1550583724-b2692b85b150" class="card-img-top" alt="Завтрак">
                    <div class="card-body">
                        <p class="card-text">Завтрак</p>
                        <div class="selected-products" id="breakfast-products"></div>
                        <div class="nutrition-summary" id="breakfast-nutrition"></div>
                    </div>
                </div>
            </div>
            <div class="col" onclick="openModal(this, 'lunch')">
                <div class="card meal-item">
                    <img src="https://images.unsplash.com/photo-1547592180-85f173990554" class="card-img-top" alt="Обед">
                    <div class="card-body">
                        <p class="card-text">Обед</p>
                        <div class="selected-products" id="lunch-products"></div>
                        <div class="nutrition-summary" id="lunch-nutrition"></div>
                    </div>
                </div>
            </div>
            <div class="col" onclick="openModal(this, 'dinner')">
                <div class="card meal-item">
                    <img src="https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445" class="card-img-top" alt="Ужин">
                    <div class="card-body">
                        <p class="card-text">Ужин</p>
                        <div class="selected-products" id="dinner-products"></div>
                        <div class="nutrition-summary" id="dinner-nutrition"></div>
                    </div>
                </div>
            </div>
            <div class="col" onclick="openModal(this, 'snack')">
                <div class="card meal-item">
                    <img src="https://images.unsplash.com/photo-1512621776951-a57141f2eefd" class="card-img-top" alt="Ланч">
                    <div class="card-body">
                        <p class="card-text">Ланч</p>
                        <div class="selected-products" id="snack-products"></div>
                        <div class="nutrition-summary" id="snack-nutrition"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="mealModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mealTitle">Выберите продукт</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Поиск продуктов..." id="productSearch">
                </div>
                <div class="modal-body text-center" id="productList">
                    <!-- Продукты будут добавлены через JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Глобальные переменные
        let products = []; // Здесь будут храниться продукты с сервера
        let selectedMealType = ''; // Текущий выбранный прием пищи
        let selectedMealItem = null; // DOM-элемент выбранного приема пищи

        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            initPageAnimations();
            loadProducts();
            loadUserMeals();
        });

        // Загрузка продуктов с сервера
        async function loadProducts() {
            try {
                const response = await fetch('/Eat/GetProducts');
                if (response.ok) {
                    products = await response.json();
                    setupModalProducts();
                } else {
                    console.error('Ошибка загрузки продуктов');
                    // Если не удалось загрузить, используем fallback данные
                    products = getFallbackProducts();
                    setupModalProducts();
                }
            } catch (error) {
                console.error('Ошибка:', error);
                products = getFallbackProducts();
                setupModalProducts();
            }
        }

        // Fallback данные на случай если сервер не отвечает
        function getFallbackProducts() {
            return [
                { productId: 1, name: "Яблоко", calories: "52", proteins: 0.3, fats: 0.2, carbohydrates: 14.0 },
                { productId: 2, name: "Банан", calories: "96", proteins: 1.3, fats: 0.3, carbohydrates: 27.0 },
                { productId: 3, name: "Куриная грудка", calories: "165", proteins: 31.0, fats: 3.6, carbohydrates: 0.0 },
                { productId: 4, name: "Рис", calories: "130", proteins: 2.7, fats: 0.3, carbohydrates: 28.0 },
                { productId: 5, name: "Яйцо", calories: "68", proteins: 5.5, fats: 4.8, carbohydrates: 0.6 },
                { productId: 6, name: "Молоко", calories: "42", proteins: 3.4, fats: 1.0, carbohydrates: 5.0 },
                { productId: 7, name: "Хлеб", calories: "265", proteins: 9.0, fats: 3.2, carbohydrates: 49.0 },
                { productId: 8, name: "Сыр", calories: "402", proteins: 25.0, fats: 33.0, carbohydrates: 1.3 },
                { productId: 9, name: "Помидор", calories: "18", proteins: 0.9, fats: 0.2, carbohydrates: 3.9 },
                { productId: 10, name: "Картофель", calories: "77", proteins: 2.0, fats: 0.1, carbohydrates: 17.0 },
                { productId: 11, name: "Морковь", calories: "41", proteins: 0.9, fats: 0.2, carbohydrates: 10.0 },
                { productId: 12, name: "Апельсин", calories: "47", proteins: 0.9, fats: 0.1, carbohydrates: 12.0 },
                { productId: 13, name: "Говядина", calories: "250", proteins: 26.0, fats: 15.0, carbohydrates: 0.0 },
                { productId: 14, name: "Лосось", calories: "208", proteins: 20.0, fats: 13.0, carbohydrates: 0.0 },
                { productId: 15, name: "Йогурт", calories: "59", proteins: 10.0, fats: 0.4, carbohydrates: 3.6 },
                { productId: 16, name: "Ананас", calories: "50", proteins: 0.5, fats: 0.1, carbohydrates: 13.0 },
                { productId: 17, name: "Клубника", calories: "32", proteins: 0.7, fats: 0.3, carbohydrates: 7.7 },
                { productId: 18, name: "Паста", calories: "131", proteins: 5.0, fats: 1.1, carbohydrates: 25.0 },
                { productId: 19, name: "Масло", calories: "717", proteins: 0.9, fats: 81.0, carbohydrates: 0.1 },
                { productId: 20, name: "Салат", calories: "15", proteins: 1.4, fats: 0.2, carbohydrates: 2.9 },
                { productId: 21, name: "Огурец", calories: "16", proteins: 0.6, fats: 0.1, carbohydrates: 3.6 },
                { productId: 22, name: "Мёд", calories: "304", proteins: 0.3, fats: 0.0, carbohydrates: 82.4 },
                { productId: 23, name: "Грецкие орехи", calories: "654", proteins: 15.0, fats: 65.0, carbohydrates: 14.0 },
                { productId: 24, name: "Миндаль", calories: "579", proteins: 21.0, fats: 50.0, carbohydrates: 22.0 },
                { productId: 25, name: "Шоколад", calories: "546", proteins: 7.0, fats: 31.0, carbohydrates: 61.0 },
                { productId: 26, name: "Грибы", calories: "22", proteins: 3.1, fats: 0.3, carbohydrates: 3.3 },
                { productId: 27, name: "Арахисовая паста", calories: "588", proteins: 25.0, fats: 50.0, carbohydrates: 20.0 },
                { productId: 28, name: "Авокадо", calories: "160", proteins: 2.0, fats: 15.0, carbohydrates: 9.0 },
                { productId: 29, name: "Черника", calories: "57", proteins: 0.7, fats: 0.3, carbohydrates: 14.5 },
                { productId: 30, name: "Овсянка", calories: "389", proteins: 16.9, fats: 6.9, carbohydrates: 66.3 },
                { productId: 31, name: "Шпинат", calories: "23", proteins: 2.9, fats: 0.4, carbohydrates: 3.6 },
                { productId: 32, name: "Кокос", calories: "354", proteins: 3.3, fats: 33.5, carbohydrates: 15.2 },
                { productId: 33, name: "Виноград", calories: "69", proteins: 0.7, fats: 0.2, carbohydrates: 18.1 }
            ];
        }

        // Загрузка сохраненных данных пользователя из localStorage
        function loadUserMeals() {
            const savedMeals = localStorage.getItem('userMeals');
            if (savedMeals) {
                const userMeals = JSON.parse(savedMeals);

                // Для каждого приема пищи загружаем продукты
                ['breakfast', 'lunch', 'dinner', 'snack'].forEach(mealType => {
                    if (userMeals[mealType]) {
                        renderMealProducts(mealType, userMeals[mealType]);
                        updateNutritionSummary(mealType, userMeals[mealType]);
                    }
                });
            }
        }

        // Сохранение данных пользователя в localStorage
        function saveUserMeals(mealType, products) {
            let userMeals = localStorage.getItem('userMeals')
                ? JSON.parse(localStorage.getItem('userMeals'))
                : { breakfast: [], lunch: [], dinner: [], snack: [] };

            userMeals[mealType] = products;
            localStorage.setItem('userMeals', JSON.stringify(userMeals));
        }

        // Настройка продуктов в модальном окне
        function setupModalProducts() {
            const productList = document.getElementById('productList');
            productList.innerHTML = '';

            products.forEach(product => {
                const btn = document.createElement('button');
                btn.className = 'btn btn-outline-success m-1';
                btn.textContent = product.name;
                btn.onclick = () => addProductToMeal(product);

                // Добавляем tooltip с информацией о питательности
                btn.title = `${product.name}\nКалории: ${product.calories} ккал\nБелки: ${product.proteins}г\nЖиры: ${product.fats}г\nУглеводы: ${product.carbohydrates}г`;

                productList.appendChild(btn);
            });
        }

        // Фильтрация продуктов
        function filterProducts() {
            const searchTerm = document.getElementById('productSearch').value.toLowerCase();
            const buttons = document.querySelectorAll('#productList .btn');

            buttons.forEach(btn => {
                const productName = btn.textContent.toLowerCase();
                if (productName.includes(searchTerm)) {
                    btn.style.display = 'inline-block';
                    animate({
                        duration: 300,
                        timing: easeOutQuad,
                        draw: progress => {
                            btn.style.opacity = progress;
                            btn.style.transform = `translateY(${10 - 10 * progress}px)`;
                        }
                    });
                } else {
                    btn.style.display = 'none';
                }
            });
        }

        // Открытие модального окна
        const modal = new bootstrap.Modal(document.getElementById('mealModal'));

        function openModal(mealItem, mealType) {
            selectedMealType = mealType;
            selectedMealItem = mealItem;

            const mealNames = {
                'breakfast': 'Завтрак',
                'lunch': 'Обед',
                'dinner': 'Ужин',
                'snack': 'Ланч'
            };

            document.getElementById("mealTitle").innerText = `Выберите продукты для ${mealNames[mealType]}`;
            document.getElementById('productSearch').value = '';
            document.getElementById('productSearch').addEventListener('input', filterProducts);

            // Показываем все кнопки продуктов при открытии модального окна
            const buttons = document.querySelectorAll('#productList .btn');
            buttons.forEach(btn => {
                btn.style.display = 'inline-block';
                btn.style.opacity = '0';
                btn.style.transform = 'translateY(10px)';

                animate({
                    duration: 300,
                    timing: bounceEaseOut,
                    draw: progress => {
                        btn.style.opacity = progress;
                        btn.style.transform = `translateY(${10 - 10 * progress}px)`;
                    }
                });
            });

            modal.show();
        }

        // Добавление продукта к приему пищи
        function addProductToMeal(product) {
            if (!selectedMealType) return;

            // Получаем текущие продукты для этого приема пищи
            let userMeals = localStorage.getItem('userMeals')
                ? JSON.parse(localStorage.getItem('userMeals'))
                : { breakfast: [], lunch: [], dinner: [], snack: [] };

      
           

            userMeals[selectedMealType].push(product);

            saveUserMeals(selectedMealType, userMeals[selectedMealType]);
            renderMealProducts(selectedMealType, userMeals[selectedMealType]);
            updateNutritionSummary(selectedMealType, userMeals[selectedMealType]);

            const container = document.getElementById(`${selectedMealType}-products`);
            const lastAdded = container.lastChild;
            if (lastAdded) {
                lastAdded.style.transform = 'scale(0)';
                animate({
                    duration: 500,
                    timing: elasticEaseOut,
                    draw: progress => {
                        lastAdded.style.transform = `scale(${progress})`;
                    }
                });
            }
        }

        // Отображение продуктов для приема пищи
        function renderMealProducts(mealType, products) {
            const container = document.getElementById(`${mealType}-products`);
            container.innerHTML = '';

            products.forEach(product => {
                const productCircle = document.createElement("div");
                productCircle.className = "product-circle";
                productCircle.textContent = product.name;
                productCircle.title = `${product.name}\nКалории: ${product.calories} ккал\nБелки: ${product.proteins}г\nЖиры: ${product.fats}г\nУглеводы: ${product.carbohydrates}г`;

                // Добавляем обработчик для удаления
                productCircle.onclick = function(e) {
                    e.stopPropagation();
                    removeProductFromMeal(mealType, product.productId);
                };

                container.appendChild(productCircle);
            });
        }

        // Удаление продукта из приема пищи
        function removeProductFromMeal(mealType, productId) {
            let userMeals = JSON.parse(localStorage.getItem('userMeals'));

            // Фильтруем продукты, удаляя выбранный
            userMeals[mealType] = userMeals[mealType].filter(p => p.productId !== productId);

            // Сохраняем и обновляем UI
            saveUserMeals(mealType, userMeals[mealType]);
            renderMealProducts(mealType, userMeals[mealType]);
            updateNutritionSummary(mealType, userMeals[mealType]);
        }

        // Обновление сводки по питательности
        function updateNutritionSummary(mealType, products) {
            const summaryElement = document.getElementById(`${mealType}-nutrition`);

            // Рассчитываем общие значения
            let totalCalories = 0;
            let totalProteins = 0;
            let totalFats = 0;
            let totalCarbs = 0;

            products.forEach(product => {
                totalCalories += parseFloat(product.calories) || 0;
                totalProteins += parseFloat(product.proteins) || 0;
                totalFats += parseFloat(product.fats) || 0;
                totalCarbs += parseFloat(product.carbohydrates) || 0;
            });

            // Форматируем значения
            summaryElement.innerHTML = `
                <div class="nutrition-item">
                    <div class="nutrition-value">${totalCalories.toFixed(0)}</div>
                    <div class="nutrition-label">ккал</div>
                </div>
                <div class="nutrition-item">
                    <div class="nutrition-value">${totalProteins.toFixed(1)}</div>
                    <div class="nutrition-label">белки</div>
                </div>
                <div class="nutrition-item">
                    <div class="nutrition-value">${totalFats.toFixed(1)}</div>
                    <div class="nutrition-label">жиры</div>
                </div>
                <div class="nutrition-item">
                    <div class="nutrition-value">${totalCarbs.toFixed(1)}</div>
                    <div class="nutrition-label">углеводы</div>
                </div>
            `;
        }

        // Анимации страницы
        function initPageAnimations() {
            // Анимация заголовка
            animate({
                duration: 800,
                timing: bounceEaseOut,
                draw: progress => {
                    const title = document.querySelector('h1');
                    title.style.opacity = progress;
                    title.style.transform = `translateY(${-20 + 20 * progress}px)`;
                }
            });

            // Анимация карточек
            document.querySelectorAll('.meal-item').forEach((card, index) => {
                setTimeout(() => {
                    animate({
                        duration: 600,
                        timing: bounceEaseOut,
                        draw: progress => {
                            card.style.opacity = progress;
                            card.style.transform = `translateY(${20 - 20 * progress}px)`;
                        }
                    });

                    // Эффекты при наведении
                    const img = card.querySelector('.card-img-top');
                    card.addEventListener('mouseenter', () => {
                        animate({
                            duration: 300,
                            timing: easeOutBack,
                            draw: progress => {
                                card.style.transform = `translateY(${-8 * progress}px) scale(${1 + 0.03 * progress})`;
                                img.style.transform = `scale(${1 + 0.1 * progress})`;
                            }
                        });
                    });

                    card.addEventListener('mouseleave', () => {
                        animate({
                            duration: 300,
                            timing: easeOutQuad,
                            draw: progress => {
                                card.style.transform = `translateY(${-8 + 8 * progress}px) scale(${1.03 - 0.03 * progress})`;
                                img.style.transform = `scale(${1.1 - 0.1 * progress})`;
                            }
                        });
                    });
                }, index * 100);
            });
        }

        // Функции анимации
        function animate({duration, timing, draw, onComplete}) {
            const start = performance.now();

            requestAnimationFrame(function animateFrame(time) {
                let progress = (time - start) / duration;
                if (progress > 1) progress = 1;

                draw(timing(progress));

                if (progress < 1) {
                    requestAnimationFrame(animateFrame);
                } else if (onComplete) {
                    onComplete();
                }
            });
        }

        // Функции плавности
        function linear(progress) { return progress; }
        function easeOutQuad(progress) { return progress * (2 - progress); }
        function easeOutBack(progress) {
            const c1 = 1.70158;
            const c3 = c1 + 1;
            return 1 + c3 * Math.pow(progress - 1, 3) + c1 * Math.pow(progress - 1, 2);
        }
        function easeInBack(progress) {
            const c1 = 1.70158;
            return progress * progress * ((c1 + 1) * progress - c1);
        }
        function bounceEaseOut(progress) {
            if (progress < 1/2.75) {
                return 7.5625 * progress * progress;
            } else if (progress < 2/2.75) {
                return 7.5625 * (progress -= 1.5/2.75) * progress + 0.75;
            } else if (progress < 2.5/2.75) {
                return 7.5625 * (progress -= 2.25/2.75) * progress + 0.9375;
            } else {
                return 7.5625 * (progress -= 2.625/2.75) * progress + 0.984375;
            }
        }
        function elasticEaseOut(progress) {
            return Math.pow(2, -10 * progress) * Math.sin((progress - 0.3/4) * (2 * Math.PI)/0.3) + 1;
        }
    </script>
</body>
</html>